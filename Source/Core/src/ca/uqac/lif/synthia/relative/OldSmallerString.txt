package ca.uqac.lif.synthia.relative;

import ca.uqac.lif.synthia.Picker;
import ca.uqac.lif.synthia.random.RandomInteger;
import ca.uqac.lif.synthia.random.RandomString;

/**
 * Generates a random characters string smaller than a specified one.
 */
public class SmallerString1 implements RelativePicker<String>
{

	protected RandomString m_smallStrings;

	/**
	 * Private constructor used to duplicate the picker.
	 *
	 * @param strings The {@link RandomString} of the instance to duplicate.
	 */
	private SmallerString1( RandomString strings)
	{
		m_smallStrings = strings;
	}

	/**
	 * Default constructor.
	 */
	public SmallerString1()
	{
		m_smallStrings = new RandomString(new RandomInteger(0, 1));
	}

	/**
	 * Constructor to specify the allowed characters for the random string.
	 *
	 * @param char_array The allowed characters.
	 */
	public SmallerString1(char[] char_array)
	{
		m_smallStrings = new RandomString(new RandomInteger(0, 1), char_array);
	}

	@Override
	public void reset()
	{
		m_smallStrings.setInterval(0, 1);
		m_smallStrings.reset();
	}

	//TODO do something with this...
	@Override
	public String pick()
	{
		return null;
	}

	@Override
	public String pick(String element)
	{
		m_smallStrings.setInterval(0, element.length());
		return m_smallStrings.pick();
	}
	@Override
	public Picker<String> duplicate(boolean with_state)
	{
		return new SmallerString1((RandomString) m_smallStrings.duplicate(with_state));
	}
}
