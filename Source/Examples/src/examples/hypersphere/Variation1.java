/*
    Synthia, a data structure generator
    Copyright (C) 2019-2021 Laboratoire d'informatique formelle
    Université du Québec à Chicoutimi, Canada

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package examples.hypersphere;

import ca.uqac.lif.synthia.random.AffineTransform.AffineTransformFloat;
import ca.uqac.lif.synthia.random.RandomFloat;
import ca.uqac.lif.synthia.random.RandomInteger;
import ca.uqac.lif.synthia.vector.HyperspherePicker;
import examples.util.Utilities;

/**
 * Generates two-dimensional points lying along two concentric circles.
 * The points are generated by composing pickers as in the following diagram:
 * <p>
 * <img src="{@docRoot}/doc-files/hypersphere/Variation1.png" alt="Diagram"> 
 * <p>
 * For each point, a radius of either 1 or 2 is selected. A random floating
 * point <i>x</i> between 0 and 1 is also selected, to which the affine
 * transform 2&pi;<i>x</i>+0 is then applied. The end result is that each
 * point lies at any angle between 0 and 2&pi; on the circle of radius 1 or 2.
 * The two plots at the bottom represent the possible values one could
 * obtain by starting from a different random seed.
 * 
 * @ingroup Examples
 */
public class Variation1 
{

	@SuppressWarnings("unchecked")
	public static void main(String[] args)
	{
		RandomInteger radius = new RandomInteger(1, 3);
		RandomFloat r_float = new RandomFloat().setSeed(42);
		AffineTransformFloat angle = new AffineTransformFloat(r_float, 2 * Math.PI, 0);
		HyperspherePicker hp = new HyperspherePicker(radius, angle);
		for (int i = 0; i < 100; i++)
		{
			Utilities.println(System.out, hp.pick());
		}
	}

}
